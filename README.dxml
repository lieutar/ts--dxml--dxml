<?xml version="1.0" encoding="utf-8" ?>
<sec lang="ja">
  <title>dxml</title>
  <paragraph>
    <img src="https://img.shields.io/badge/-TYPESCRIPT-informational?logo=TypeScript&amp;style=flat&amp;logoColor=1a5fb4&amp;color=1a5fb4&amp;labelColor=f6f5f4" alt="Powerd by TypeScript" />
    <img src="https://img.shields.io/badge/-xml-informational?logo=xml&amp;style=flat&amp;logoColor=26a269&amp;color=26a269&amp;labelColor=f6f5f4" alt="Powerd by XML"/>
  </paragraph>

  <d>
    XML for draft.
  </d>

  <d>
    `dxml` はシンプルなフォーマットで独自の要素としては `sec`, `title`, `d`というものしか持ちません。
    <d lang="en">
      `dxml` is a simple format and having only following unique elements: `sec`, `title`, `d`.
    </d>
  </d>
  <d>
    これだけで何故文書フォーマットたりえるのか、それは dxml の Text Node に Markdown が書けるためで、
    ではなぜ Markdown では駄目なのかと言えば、Markdown では複数の言語による表記を混在させ、
    必要に応じたものだけを抜き出すといった処理ができないためです。
    <d lang="en">
      Why does this alone qualify as a document format?
      Because Markdown can be written in dxml Text Nodes.
      So why isn't Markdown sufficient?
      Because Markdown doesn't allow for mixing notations in multiple languages
      and extracting only the necessary ones.
    </d>
  </d>
  <d>
    最適なのは Markdown をより拡張するような軽量マークアップ言語とそのパーサを書くことですが、
    それはすぐに出来るものではありません。しかし、xml ならば既存のパーサがありますし、
    細かなマークアップについては、Markdown の力を借り、既存の Markdown パーサに通すという形が、
    最も少ない工数でこの目的に叶うソリューションを作りだすものになります。
    <d lang="en">
      The optimal solution would be to write a lightweight markup language that extends Markdown and its parser,
      but that's not something that can be done immediately.
      However, there are existing parsers for XML, and for detailed markup,
      borrowing the power of Markdown and running it through an existing Markdown parser
      would be the solution that meets this goal with the least amount of effort.
    </d>
  </d>  
  <sec><!--==================================================================-->
    <title>Installation</title>
    <d>
      現在、[ワークスペース](ws:/)内での開発にのみ対応しており、公式なインストール方法はありません。
      <d lang="en">
        Now time, this project is supported for development on my [workspace](ws:/), and
        this don't provide regular way to install.
      </d>
    </d>
  </sec>
  <sec><!--==================================================================-->
    <title>Elements</title>
    <sec>
      <title>Unique Elements</title>
      <sec>
        <title>`&lt;sec&gt;`</title>
        <d>
          すべての文書の基本的なコンテナ。ルート要素になることができるもの。
          <d lang="en">
            A basic container for any document. It can also serve as the root element.
          </d>
        </d>
        <d>
          `&lt;sec&gt;`はネストすることができ、ネストによりレベルを示すことができる。
          <d lang="en">
            Nested `&lt;sec&gt;` elements define the document's section levels.
          </d>
        </d>
        <d>
          ルート要素の `lang` 属性は`&lt;d&gt;`要素のデフォルトの同属性の値となる。
          <d lang="en">
            The `lang` attribute on the root element sets the default language for
            all nested `&lt;d&gt;` elements.
          </d>
        </d>
      </sec>
      <sec>
        <title>`&lt;title&gt;`</title>
        <d>`&lt;sec&gt;`要素の直下に一つだけ設定されるセクションのタイトル。</d>
      </sec>
      <sec>
        <title>`&lt;d&gt;`</title>
        <d>ドラフト要素。</d>
        <d>一段階までネストすることができ、`lang`属性によって親`&lt;d&gt;`要素の別言語オルタナティヴを設定できる。</d>
      </sec>
    </sec>
    <sec>
      <title>HTML Elements</title>
      <d>
        [GFM](https://github.github.com/gfm/) では HTML 要素を入れ込むことができますが、dxml で入れ込むときは、
        XML 要素として書きます。
      </d>
      <d>
        このとき、名前空間はデフォルトのもので構いません。(むしろ名前空間を厳格に扱ってはいません)
      </d>
      <d>
        現状、サポートしている要素は `img` です。
      </d>
    </sec>
    <sec>
      <title>Markdown Elements</title>
      <d>
        TextNode は Markdown ですが、dxml パーサは [remark](https://github.com/remarkjs/remark) を通し
        POJO AST 化したものを、機械的に XML に変換します。
      </d>
      <d>
        その為それによって生成され得る要素は dxml 内に直接書くことができます。たとえば以下のようにです。
      </d>
      ``` xml
      &lt;paragraph&gt;
      &lt;img src="..." alt=".." /&gt;
      &lt;/paragraph&gt;
      This is new paraguraph.
      ```
      <d>
        これは殆どの場合には不要なテクニックですが、この例のように
        HTML 要素に続くパラグラフを別のものとして扱いたい場合などに使えます。
      </d>
    </sec>
  </sec>
</sec>
